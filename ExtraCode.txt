 <!--Not essential so will be finished at a later stage-->
    <div id="mapStyleMenu">
        <!--Satellite filter on map-->
        <input id="ckvgez78nej8h15qq0xm34dba" type="radio" name="rtoggle" value="satellite">
        <label for="ckvgez78nej8h15qq0xm34dba">Satellite</label>

        <!--Satellite filter on map-->
        <input id="mapbox/light-v10" type="radio" name="rtoggle" value="light">
        <label for="mapbox/light-v10">Light</label>

        <!--Satellite filter on map-->
        <input id="mapbox/dark-v10" type="radio" name="rtoggle" value="dark">
        <label for="mapbox/dark-v10">Dark</label>

        <!--Blue filter on map-->
        <input id="ckvcr41l82igb15o20zlmtz6i" type="radio" name="rtoggle" value="blue" checked="checked">
        <label for="ckvcr41l82igb15o20zlmtz6i">Blue</label>
    </div>

    
    <!--Navigation bar-->
    <!--Not essential so will be finished at a later stage-->

    <!-- Load an icon library to show a hamburger menu (bars) on small screens -->
    <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">   
    
    <div class="topnav" id="navbar">
        <a href="#Tracker" class="active">Tracker</a>
        <a href="#contact" >Contact</a>
        <a href="#about">About</a>
            <i class="fa fa-bars"></i>
    </div>
 -->
featureLat = feature.geometry.coordinates[1];
        featureLng = feature.geometry.coordinates[0];
        console.log(featureLng, featureLat);



#coord {
    display: table;
    position: relative;
    margin: 0px auto;
    word-wrap: normal;
    white-space: pre-wrap;
    padding: 10px;
    border: none;
    border-radius: 3px;
    font-size: 12px;
    text-align: center;
    color: #222;
    background: #fff;
    top: 0px !important;
}

function getViewBounds() {

    bounds = map.getBounds().toArray();

    console.log(bounds);

    nw[0] = bounds[1][0];
    nw[1] = bounds[0][1];
    ne = bounds[1];
    sw = bounds[0];
    se[0] = bounds[0][0];
    se[1] = bounds[1][1];

    //console.log("ne:" + ne + "\nnw: " + nw + "\nse: " + se + "\nsw: " + sw);
}

var bounds;
var nw = [];
var ne = [];
var sw = [];
var se = [];

    // Add location tracking of mouse pointer for testing purposes. Will be removed in final product
    map.on('mousemove', (e) => {
        document.getElementById("coord").innerHTML = JSON.stringify(e.lngLat.wrap());
    });
.topnav {
    background-color: rgb(49,49,49);
    overflow: hidden;
  }
  
  /* Style the links inside the navigation bar */
  .topnav a {
    float: left;
    display: block;
    color: #f2f2f2;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
    font-size: 17px;
  }
  
  /* Change the color of links on hover */
  .topnav a:hover {
    background-color: #ddd;
    color: black;
  }
  
  /* Add an active class to highlight the current page */
  .topnav a.active {
    background-color: #0000EE;
    color: white;
  }

  
  /* Hide the link that should open and close the topnav on small screens */
  .topnav .icon {
    display: none;
  }

  /* When the screen is less than 600 pixels wide, hide all links, except for the first one ("Home"). Show the link that contains should open and close the topnav (.icon) */
@media screen and (max-width: 600px) {
    .topnav a:not(:first-child) {display: none;}
    .topnav a.icon {
      float: right;
      display: block;
    }
  }
  
  /* The "responsive" class is added to the topnav with JavaScript when the user clicks on the icon. This class makes the topnav look good on small screens (display the links vertically instead of horizontally) */
  @media screen and (max-width: 600px) {
    .topnav.responsive {position: relative;}
    .topnav.responsive a.icon {
      position: absolute;
      right: 0;
      top: 0;
    }
    .topnav.responsive a {
      float: none;
      display: block;
      text-align: left;
    }
}





ul {
    list-style-type: none;
    margin: 0%;
    padding: 10px;
    color:white;
  }
#navbar {
    background-color: #5c5c5c;
    width: 100%;
    height: 50px;
    position: static !important;
    display: inline !important;
    float: left !important;
    
    font-weight: bold;
}

// Initalising global arrays. Each marker graphic will have its own relevant information.
/* var icao = [];
var origin = [];
var callsign = [];
var longitude = [];
var latitude = [];
var velocity = [];
var track = [];
var altitude = [];
var coordinates = [];
var currentMarkers = [];
var clickCoord = [];
 */


/* map.on("load", async() => {
    var geojson = await getFlightData();


    //for (var key in data.states) {
    map.addSource("plane", {
            type: "geojson",
            data: geojson,
        })
        //}

    map.addLayer({
        "id": "icao",
        "type": "symbol",
        "source": "icao",
        "layout": {
            "icon-image": "planeMarker.png"
        }
    })
});

const update = setInterval(async() => {
    var data = await getFlightData(update);
    map.getSource("icao").setData(geojson)
}, 10000)

async function getFlightData(update) {
    try {
        var response = await fetch(url, { method: "GET" });
        var data = await response.json();
        for (var key in data.states) {
            icao = data.states[key][0];
            callsign = data.states[key][1]
            longitude = data.states[key][5];
            latitude = data.states[key][6];
            velocity = data.states[key][9];
            track = data.states[key][11];
            altitude = data.states[key][13];

            return {
                "type": "FeatureCollection",
                "features": {
                    "type": "Feature",
                    "geometry": {
                        'type': 'Point',
                        'coordinates': [longitude, latitude],
                        'track': track,
                        'velocity': velocity,
                        'altitude': altitude,
                    }
                }
            }
        };
    } catch (err) {
        if (updateSource) clearInterval(updateSource);
        throw new Error(err);
    }
} */







//Creating a HTML class for each graphic.
        var markerGraphic = document.createElement('div')
        markerGraphic.className = "marker";

        var graphic = new mapboxgl.Marker(markerGraphic)
            .setLngLat(graphic.getCoordinates())
            .setRotation(graphic.getTrack())
            //.setRotationAlignment('map')
            .addTo(map);
        currentMarkers.push(graphic);

        //console.log(graphic.longitude, ',', graphic.latitude);
        /* console.log(graphic.track, geojson.geometry.track); */





        /*  // Creating a HTML class for each marker.
        var marker = document.createElement("div");
        marker.className = "marker";

        // Creates the marker in correct position and rotation, adding it to the currentMarkers array.
        var graphic = new mapboxgl.Marker(marker).setLngLat(coordinates[index]).setRotation(track[index]).setRotationAlignment('map').addTo(map);
        currentMarkers.push(graphic); */


/* console.log(markerJson);
    const geojsonSource = map.getSource("points");
    geojsonSource.setData(markerJson); */
    //console.log(geojsonSource);    



  // Fly the map to the location.
            map.flyTo({
                center: [longitude, latitude],
                speed: 0.5
            });



/* imageLink = "https://github.com/Rohan-Burman/Aircraft-Tracker/blob/main/planeMarker.png?raw=true"
map.on("load", () => {
    map.loadImage(imageLink, (error, image) => {
        if (error)
            throw error;


        map.addImage("custom-marker", image);

        map.addSource("points", {
            "type": "geojson",
            "data": {
                "type": "FeatureCollection ",
                "features": []
            }
        })
    })

    map.addLayer({
        "id": "points",
        'type': 'symbol',
        'source': 'points',
        'layout': {
            'icon-image': 'custom-marker',
            // get the title name from the source's "title" property
            'text-field': [
                'get', 'icao',
                'get', 'callsign',
                'get', 'orign',
                'get', 'coordinates',
                'get', 'velocity',
                'get', 'track',
                'get', 'altitude',

            ],
            'text-font': [
                'Open Sans Semibold', 'Arial Unicode MS Bold'
            ],
            'text-offset': [
                0, 1.25
            ],
            'text-anchor': 'top'
        }
    })
})

map.addSource("points", {
    "type": "geojson",
    "data": {
        "type": "FeatureCollection ",
        "features": []
    }
})
 */


        async function getData() {
    const url = "https://opensky-network.org/api/states/all";

    /* var geojson = {
        type: 'FeatureCollection',
        features: [{
            type: 'Feature',
            geometry: {
                type: 'Point',
                coordinates: coordinates,
                velocity: velocity,
                track: track,
                altitude: altitude,
            },
            properties: {
                key: key,
                information: function() {
                    return ("ICAO: " + icao + "\nCallign: " + callsign + "\nCoordinates: " + coordinates + "\nVelocity: " + velocity + "\nAltitude: " + altitude + "\nTrack: " + track);
                }
            }
        }]
    };
 */
    key = 0;

    var response = await fetch(url);
    var data = await response.json();

    //Loops throuugn the API response and assigns variables for each flight to be made into a marker graphic.
    for (var key in data.states) {

        //Assigning data from the API into varibles.
        /* icao = data.states[key][0];
        callsign = data.states[key][1]
        longitude = data.states[key][5];
        latitude = data.states[key][6];
        velocity = data.states[key][9];
        track = data.states[key][10];
        altitude = data.states[key][13];

        coordinates = [longitude, latitude];

        geojson.features.geometry.coordinates.push(coordinates);
        geojson.features.geometry.velocity.push(velocity);
        geojson.features.geometry.track.push(track);
        geojson.features.geometry.altitude.push(altitude);
        geojson.features.properties.key.push(key); */

        longitude = data.states[key][5];
        latitude = data.states[key][6];
        coordinates = [longitude, latitude];


        //Creating a HTML class for each marker.
        var marker = document.createElement("div");
        marker.className = "marker";

        //Creates the marker in correct position and rotation, adding it to the currentMarkers array.
        var graphic = new mapboxgl.Marker(marker)
            .setLngLat(coordinates)
            .setRotation(data.states[10])
            .setRotationAlignment('viewport')
            .addTo(map);
        currentMarkers.push(graphic);
    }
}


// Checks if the location of the mouse click is the same as an aircrafts location.
/* map.on('click', (function getLocation(e) {

    clickCoord = e.lngLat.toArray();

    clickCoord[0] = clickCoord[0].toFixed(4);
    clickCoord[1] = clickCoord[1].toFixed(4);

    console.log(clickCoord);

    // Loops through all list of coordinates and checks if the clicked location is the same
    for (index in coordinates) {
        if (coordinates[index] == clickCoord) {}
        new mapboxgl.Popup().setLngLat(clickCoord).setHTML('MATCH! You clicked here: <br/>' + clickCoord).addTo(map);
    }
})); */



/* map.on("load", () => {
    map.loadImage(imageLink, (error, image) => {
        if (error) 
            throw error;
        

        map.addImage,
        age("custom-marker", image);

        map.addSource("points", {
            "type": "geojson",
            "data": {
                "type": "FeatureCollection ",
                "features": []
            }
        })
    })

    map.addLayer({
        "id": "points",
        'type': 'symbol',
        'source': 'points',
        'layout': {
            'icon-image': 'custom-marker',
            // get the title name from the source's "title" property
            'text-field': [
                'get', 'icao',
                'get', 'callsign',
                'get', 'orign',
                'get', 'coordinates',
                'get', 'velocity',
                'get', 'track',
                'get', 'altitude',

            ],
            'text-font': [
                'Open Sans Semibold', 'Arial Unicode MS Bold'
            ],
            'text-offset': [
                0, 1.25
            ],
            'text-anchor': 'top'
        }
    })
})

map.addSource("points", {
    "type": "geojson",
    "data": {
        "type": "FeatureCollection ",
        "features": []
    }
})
 */


  /*  //Assigning data from the API into arrays.
        icao[index] = data.states[index][0];
        callsign[index] = data.states[index][1]
        origin[index] = data.states[index][2];
        longitude[index] = data.states[index][5];
        latitude[index] = data.states[index][6];
        velocity[index] = data.states[index][9];
        track[index] = data.states[index][10];
        altitude[index] = data.states[index][13];

        coordinates[index] = [longitude[index], latitude[index]]; */



        /*  // Creating a HTML class for each marker.
        var marker = document.createElement("div");
        marker.className = "marker";

        // Creates the marker in correct position and rotation, adding it to the currentMarkers array.
        var graphic = new mapboxgl.Marker(marker).setLngLat(coordinates[index]).setRotation(track[index]).setRotationAlignment('map').addTo(map);
        currentMarkers.push(graphic); */